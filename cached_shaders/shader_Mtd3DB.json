[{"ver":"0.1","info":{"id":"Mtd3DB","date":"1471634609","viewed":16480,"name":"DragonBall ","username":"ivansafrin","description":"Shader a day shader #8","likes":97,"published":3,"flags":0,"usePreview":0,"tags":[]},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"\/media\/a\/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"\/media\/ap\/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat scene(vec3 position) {\n    float height = 0.3;\n    return length(position)-height;\n}\n\nvec3 getNormal(vec3 pos, float smoothness) {\t\n\tvec3 n;\n\tvec2 dn = vec2(smoothness, 0.0);\n\tn.x\t= scene(pos + dn.xyy) - scene(pos - dn.xyy);\n\tn.y\t= scene(pos + dn.yxy) - scene(pos - dn.yxy);\n\tn.z\t= scene(pos + dn.yyx) - scene(pos - dn.yyx);\n\treturn normalize(n);\n}\n\nfloat raymarch(vec3 position, vec3 direction) {\n    float total_distance = 0.0;\n    for(int i = 0 ; i < 32 ; ++i) {\n        float result = scene(position + direction * total_distance);\n        if(result < 0.005)\n        {\n            return total_distance;\n        }\n        total_distance += result;\n    }\n    return -1.0;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    uv -= vec2(0.5*iResolution.x\/iResolution.y, 0.5); \n    uv.y *= -1.0;\n    vec3 origin = vec3(sin(iTime*0.1) * 2.5, 0.0, cos(iTime*0.1) * 2.5);\n    \n    mat3 camMat = calcLookAtMatrix( origin, vec3(0.0), 0.0 );\n\tvec3 direction = normalize( camMat * vec3(uv, 2.5));\n    \n    \n    float dist = raymarch(origin, direction);\n    if(dist < 0.0) {\n\t\tfragColor = texture(iChannel1, direction);\n    } else{\n        vec3 fragPosition = origin+direction*dist;\n \t\tvec3 N = getNormal(fragPosition, 0.01);\n        vec4 ballColor = vec4(1.0, 0.8, 0.0, 1.0) * 0.75;\n        vec3 ref = reflect(direction, N);\n        \n        float P = PI\/5.0;\n        float starVal = (1.0\/P) * (P - abs( mod(atan(uv.x, uv.y)+ PI,(2.0*P)) - P));\n        vec4 starColor = (distance(uv, vec2(0.0,0.0)) < 0.06-(starVal * 0.03)) ? vec4(2.8, 1.0, 0.0, 1.0) : vec4(0.0);\n        \n        float rim = max(0.0, (0.7 + dot(N,direction)));\n        \n        vec3 refr = refract(direction, N, 0.7);\n        fragColor =  \n           \n            texture(iChannel1, refr) * ballColor +\n            (vec4(0.6, 0.2, 0.0, 1.0) * max(0.0, 1.0-distance(uv * 4.0, vec2(0.0,0.0)))) * 4.0  * (0.2 + abs(sin(iTime)) * 0.8) + \n           + starColor\n            + texture(iChannel1, ref) * 0.3\n        + vec4(rim, rim * 0.5, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}]