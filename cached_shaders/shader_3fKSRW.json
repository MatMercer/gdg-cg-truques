[{"ver":"0.1","info":{"id":"3fKSRW","date":"1749861857","viewed":71,"name":"026 - Simple clock","username":"PiGIon","description":"Thank you PureAsbestos for the line algorithm!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":[]},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define now iDate.w\n\/\/#define iTime 86337.\n\nfloat diag(vec2 p0, vec2 p1)\n{\n    vec2 d = abs(p1 - p0);\n    return max(d.x, d.y);\n}\n\n\/\/ Created by PureAsbestos, 2023\n\/\/ Free for any use. Credit appreciated but not required.\nfloat line(vec2 p, vec2 p0, vec2 p1)\n{\n    float stp = diag(p,p0);\n    float n = diag(p0,p1);\n    float t = (n==0.0)? 0.0 : stp\/n; \n\n    vec2 pt = mix(p0, p1, t);\n    vec2 d = abs(p - round(pt));\n    return (d.x < 0.5\n         && d.y < 0.5\n         && stp <= n)\n          ? 1.0 : 0.0 ;\n}\n\n\/\/ Returns a vector that rotates\n\/\/ v: current value, best\nvec2 rot(float d, float l) {\n    \/\/ 1 rotation per iTime\n    float v = now * 2.0 * PI;\n    \/\/ 1 rotation per d\n    v \/= d;\n    \/\/ keep the hands up\n    v -= PI\/2.;\n    \/\/ l is length\n    return l*vec2(cos(-v), sin(-v));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,0,1);\n    vec2 uv = (2. * fragCoord - iResolution.xy) \/ iResolution.y;\n\n    float zoomCycle = sin(iTime * 0.9) * 0.5 + 0.5;\n    float zoomFactor = mix(0.5, 4.0, zoomCycle);\n\n    uv *= 25. + 10.*zoomFactor;\n    vec2 center = vec2(0.);\n    center = round(center);\n\n\n    \/\/ seconds\n    fragColor.r = line(round(uv), center, round(center + rot(60., 80.)));\n    \/\/ minutes\n    fragColor.g = line(round(uv), center, round(center + rot(60.*60., 40.)));\n    \/\/ hours\n    fragColor.b = line(round(uv), center, round(center + rot(60.*60.*12., 20.)));\n}","name":"Image","description":"","type":"image"}]}]