proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=shader_cache:50m inactive=30d max_size=1g use_temp_path=off;

server {
    listen 80;

    location = /shadertoy {
        default_type application/json;
        add_header Access-Control-Allow-Origin "*";

        if ($request_method = POST) {
            content_by_lua_block {
                ngx.req.read_body()
                local args = ngx.req.get_post_args()
                local s_param = args["s"]

                if not s_param then
                    ngx.status = 400
                    ngx.say('{"error":"Missing \'s\' POST parameter"}')
                    return
                end

                local cjson = require("cjson.safe")
                local decoded = cjson.decode(s_param)
                if not decoded or not decoded.shaders or #decoded.shaders < 1 then
                    ngx.status = 400
                    ngx.say('{"error":"Invalid \'s\' POST parameter"}')
                    return
                end

                local shaderId = decoded.shaders[1]
                local filename = "/etc/nginx/cached_shaders/shader_" .. shaderId .. ".json"

                local f = io.open(filename, "r")
                if not f then
                    ngx.status = 503
                    ngx.say('{"error":"Shader '..shaderId..' not cached"}')
                    return
                end

                local content = f:read("*a")
                f:close()
                ngx.say(content)
            }
        }
    }

    resolver 1.1.1.1 8.8.8.8 ipv6=off;    # Cloudflare and Google DNS servers
    set $backend "www.shadertoy.com";

    location / {
        proxy_pass https://$backend;
        proxy_ssl_server_name on;
        proxy_set_header Host "www.shadertoy.com";
        proxy_set_header Referer "https://www.shadertoy.com$request_uri";
        proxy_set_header Origin "https://www.shadertoy.com";
        proxy_set_header Accept-Encoding "";
        proxy_set_header User-Agent $http_user_agent;

        proxy_cache shader_cache;
        proxy_cache_valid 200 302 30d;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_ignore_headers Cache-Control Expires Set-Cookie;
        proxy_hide_header Set-Cookie;

        add_header X-Proxy-Cache-Status $upstream_cache_status;
    }
}
